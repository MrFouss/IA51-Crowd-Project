/** 
 * MIT License
 * 
 * Copyright (c) 2017 Krophil'
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package fr.utbm.info.ia51.crowdproject.environment

import fr.utbm.info.ia51.crowdproject.motion.CryType
import java.awt.Color
import java.util.LinkedList
import org.dyn4j.geometry.Geometry
import org.dyn4j.geometry.Vector2

class LevelDesign {
	val level : Levels
	val width : float
	val height : float
	
	var staticBodies = new LinkedList<StaticBody>
	var soundSources = new LinkedList<StaticSoundSource>
	
	new(level : Levels, width : float, height : float) {
		this.level = level
		this.width = width
		this.height = height
		createStaticBodies
		createSoundSources
	}

	def getStaticBodies : LinkedList<StaticBody> {
		return staticBodies
	}

	def getSoundSources : LinkedList<StaticSoundSource> {
		return soundSources
	}
	
	def createStaticBodies {
		// Spawn top wall
		val topWall = new StaticBody(Geometry.createRectangle(width, 6), Color.GRAY)
		topWall.translate(0, -height / 2 + 3)
		this.staticBodies += topWall
		topWall.getFixture(0).userData = ShapeType.WALL
		
		// Spawn bottom wall
		val bottomWall = new StaticBody(Geometry.createRectangle(width, 6), Color.GRAY)
		bottomWall.translate(0, height / 2 - 3)
		this.staticBodies += bottomWall
		bottomWall.getFixture(0).userData = ShapeType.WALL

		// Spawn left wall
		val leftWall = new StaticBody(Geometry.createRectangle(6, height), Color.GRAY)
		leftWall.translate(-width / 2 + 3, 0)
		this.staticBodies += leftWall
		leftWall.getFixture(0).userData = ShapeType.WALL

		// Spawn right wall
		val rightWall = new StaticBody(Geometry.createRectangle(6, height), Color.GRAY)
		rightWall.translate(width / 2 - 3, 0)
		this.staticBodies += rightWall
		rightWall.getFixture(0).userData = ShapeType.WALL
		
		switch (this.level) {
			case BASIC: {
				// Spawn middle wall
				val midWall = new StaticBody(Geometry.createRectangle(6, height / 2), Color.GRAY)
				midWall.getFixture(0).userData = ShapeType.WALL
				midWall.translate(0, 0)
				this.staticBodies += midWall
			}
		
			case PARALLELISM: {
				// Spawn half bottom wall
				val aWall = new StaticBody(Geometry.createRectangle(width / 2, 6), Color.GRAY)
				aWall.getFixture(0).userData = ShapeType.WALL
				aWall.translate(0, height / 4)
				this.staticBodies += aWall

				// Spawn half top wall
				val bWall = new StaticBody(Geometry.createRectangle(width / 2, 6), Color.GRAY)
				bWall.translate(0, -height / 4)
				this.staticBodies += bWall
				bWall.getFixture(0).userData = ShapeType.WALL
			}
			
			case SNAKE: {
				// Spawn half bottom wall
				val aWall = new StaticBody(Geometry.createRectangle(width / 2, 6), Color.GRAY)
				aWall.getFixture(0).userData = ShapeType.WALL
				aWall.translate(0, height / 4)
				this.staticBodies += aWall
				
				// Spawn top wall
				val bWall = new StaticBody(Geometry.createRectangle(width / 2, 6), Color.GRAY)
				bWall.translate(0, -height / 4)
				this.staticBodies += bWall
				bWall.getFixture(0).userData = ShapeType.WALL
				
				// Spawn right wall
				val cWall = new StaticBody(Geometry.createRectangle(6, height / 4), Color.GRAY)
				cWall.getFixture(0).userData = ShapeType.WALL
				cWall.translate(width / 4 - 3, -height / 8)
				this.staticBodies += cWall

				// Spawn middle wall
				val dWall = new StaticBody(Geometry.createRectangle(width / 2, 6), Color.GRAY)
				this.staticBodies += dWall
				dWall.getFixture(0).userData = ShapeType.WALL

				// Spawn left wall
				val eWall = new StaticBody(Geometry.createRectangle(6, height / 4), Color.GRAY)
				eWall.getFixture(0).userData = ShapeType.WALL
				eWall.translate(-width / 4 + 3, height / 8)
				this.staticBodies += eWall
			}
			case WHIRL: {
				val aWall = new StaticBody(Geometry.createRectangle(6, height / 4), Color.GRAY)
				aWall.getFixture(0).userData = ShapeType.WALL
				aWall.translate(0, 0)
				this.staticBodies += aWall

				val bWall = new StaticBody(Geometry.createRectangle(width / 4, 6), Color.GRAY)
				bWall.getFixture(0).userData = ShapeType.WALL
				bWall.translate(-width / 8 + 3, height / 8)
				this.staticBodies += bWall

				val cWall = new StaticBody(Geometry.createRectangle(6, height / 1.8), Color.GRAY)
				cWall.getFixture(0).userData = ShapeType.WALL
				cWall.translate(-width / 4 + 3, -height / 8 + 3)
				this.staticBodies += cWall

				val dWall = new StaticBody(Geometry.createRectangle(width / 2, 6), Color.GRAY)
				dWall.getFixture(0).userData = ShapeType.WALL
				dWall.translate(0, -height / 2.5f)
				this.staticBodies += dWall

				val eWall = new StaticBody(Geometry.createRectangle(6, height / 1.2), Color.GRAY)
				eWall.getFixture(0).userData = ShapeType.WALL
				eWall.translate(width / 4 - 3, 0)
				this.staticBodies += eWall

				val fWall = new StaticBody(Geometry.createRectangle(width / 1.5, 6), Color.GRAY)
				fWall.getFixture(0).userData = ShapeType.WALL
				fWall.translate(-width / 12, height / 2.5f)
				this.staticBodies += fWall
			}
			
			case RUSSIANBOXES: {
				val aWall = new StaticBody(Geometry.createRectangle(width / 8, 6), Color.GRAY)
				aWall.getFixture(0).userData = ShapeType.WALL
				this.staticBodies += aWall

				val bWall = new StaticBody(Geometry.createRectangle(6, height / 8), Color.GRAY)
				bWall.getFixture(0).userData = ShapeType.WALL
				bWall.translate(-width / 16 - 3, -height / 16)
				this.staticBodies += bWall

				val cWall = new StaticBody(Geometry.createRectangle(6, height / 8), Color.GRAY)
				cWall.getFixture(0).userData = ShapeType.WALL
				cWall.translate(width / 16 - 3, -height / 16)
				this.staticBodies += cWall

				val dWall = new StaticBody(Geometry.createRectangle(width / 4, 6), Color.GRAY)
				dWall.getFixture(0).userData = ShapeType.WALL
				dWall.translate(0, -height / 4)
				this.staticBodies += dWall

				val eWall = new StaticBody(Geometry.createRectangle(6, height / 4), Color.GRAY)
				eWall.getFixture(0).userData = ShapeType.WALL
				eWall.translate(-width / 8 - 3, -height / 8)
				this.staticBodies += eWall

				val fWall = new StaticBody(Geometry.createRectangle(6, height / 4), Color.GRAY)
				fWall.getFixture(0).userData = ShapeType.WALL
				fWall.translate(width / 8 - 3, -height / 8)
				this.staticBodies += fWall

				val gWall = new StaticBody(Geometry.createRectangle(width / 2, 6), Color.GRAY)
				gWall.getFixture(0).userData = ShapeType.WALL
				gWall.translate(0, height / 8)
				this.staticBodies += gWall

				val hWall = new StaticBody(Geometry.createRectangle(6, height / 4), Color.GRAY)
				hWall.getFixture(0).userData = ShapeType.WALL
				hWall.translate(-width / 4 - 3, 0)
				this.staticBodies += hWall

				val iWall = new StaticBody(Geometry.createRectangle(6, height / 4), Color.GRAY)
				iWall.getFixture(0).userData = ShapeType.WALL
				iWall.translate(width / 4 - 3, 0)
				this.staticBodies += iWall
			}
		}
	}

	def createSoundSources {

		switch (this.level) {
			case BASIC: {
				// Spawn target
				val target = new TargetBody(new Vector2(0.0f, -200.0f))
				this.soundSources += target
				
				val beacon1 = new SoundBeaconBody(CryType.POSITIVE, new Vector2(-200.0f, 0.0f))
				this.soundSources += beacon1

				val beacon2 = new SoundBeaconBody(CryType.WARNING, new Vector2(200.0f, 0.0f))
				this.soundSources += beacon2
			}
			
			case PARALLELISM: {
				// Spawn target
				val target = new TargetBody(new Vector2(0.0f, -200.0f))
				this.soundSources += target

				val beacon1 = new SoundBeaconBody(CryType.POSITIVE, new Vector2(-200.0f, 0.0f))
				this.soundSources += beacon1

				val beacon2 = new SoundBeaconBody(CryType.WARNING, new Vector2(200.0f, 0.0f))
				this.soundSources += beacon2
			}
			case SNAKE: {
				// Spawn target
				val target = new TargetBody(new Vector2(0.0f, -200.0f))
				this.soundSources += target

				val beacon1 = new SoundBeaconBody(CryType.POSITIVE, new Vector2(75.0f, -75.0f))
				this.soundSources += beacon1

				val beacon2 = new SoundBeaconBody(CryType.WARNING, new Vector2(-75.0f, 75.0f))
				this.soundSources += beacon2
			}
			case WHIRL: {
				// Spawn target
				val target = new TargetBody(new Vector2(0.0f, -200.0f))
				this.soundSources += target

				val beacon1 = new SoundBeaconBody(CryType.POSITIVE, new Vector2(75.0f, -75.0f))
				this.soundSources += beacon1

				val beacon2 = new SoundBeaconBody(CryType.POSITIVE, new Vector2(-75.0f, 175.0f))
				this.soundSources += beacon2
			}
			case RUSSIANBOXES: {
				// Spawn target
				val target = new TargetBody(new Vector2(0.0f, -20.0f))
				this.soundSources += target

				val beacon1 = new SoundBeaconBody(CryType.POSITIVE, new Vector2(75.0f, 40.0f))
				this.soundSources += beacon1

				val beacon2 = new SoundBeaconBody(CryType.POSITIVE, new Vector2(-75.0f, 40.0f))
				this.soundSources += beacon2
			}
		}
	}
}
