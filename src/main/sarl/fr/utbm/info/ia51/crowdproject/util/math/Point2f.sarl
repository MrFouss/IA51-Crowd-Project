/** 
 * MIT License
 * 
 * Copyright (c) 2017 Fouss
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package fr.utbm.info.ia51.crowdproject.util.math

import static extension java.lang.Math.*

/** 
 * 2D point with 2 float numbers
 */
class Point2f extends Tuple2f<Point2f> {
	
	/**
	 * @param x the x coordinate
	 * @param y the y coordinate
	 */
	new(x : float = 0, y : float = 0) {
		super(x, y)
	}
	
	/**
	 * @param p the point to copy
	 */
	new(p : Point2f) {
		super(p)
	}
	
	/**
	 * Used to set a point from two coordinates
	 * 
	 * @param x x coordinate
	 * @param y y coordinate
	 */
	def set(x : float, y : float) {
		this.x = x
		this.y = y
	}
	
	/** 
	 * Used to set a point from another
	 * 
	 * @param p Coordinate point
	 */
	def set(p : Point2f) {
		this.x = p.x
		this.y = p.y
	}
	
	/**
	 * Computes the distance between this point and the point p
	 * 
	 * @param p the other point
	 * @return the distance between this point and p
	 */
	def distance(p1 : Point2f) : float {
		var dx = this.x - p1.x
		var dy = this.y - p1.y
		return (dx.pow(2) + dy.pow(2)).sqrt as float
	}

	def operator_plus(p : Point2f, v : Vector2f) : Point2f {
		return new Point2f(p.x + v.x, p.y + v.y)
	}

	def operator_minus(p : Point2f, v : Vector2f) : Point2f {
		return new Point2f(p.x - v.x, p.y - v.y)
	}
}
