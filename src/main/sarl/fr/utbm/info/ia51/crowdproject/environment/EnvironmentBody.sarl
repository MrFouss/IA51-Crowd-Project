/** 
 * MIT License
 * 
 * Copyright (c) 2017 Fouss
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package fr.utbm.info.ia51.crowdproject.environment

import org.dyn4j.dynamics.Body
import java.awt.Color
import org.dyn4j.geometry.Convex
import org.dyn4j.geometry.MassType
import org.dyn4j.geometry.Vector2

/**
 * Abstract implementation of an environment body
 */
abstract class EnvironmentBody extends Body {
	
	val color : Color
	
	/**
	 * @param shape a shape that has to be convex
	 * @param mass the type of the mass (MassType.NORMAL or MassType.INFINITE)
	 */
	new(shape : Convex, mass : MassType) {
		this.addFixture(shape)
		this.setMass(mass)
		this.color = new Color(
			(Math.random * 0.5f + 0.5f) as float,
			(Math.random * 0.5f + 0.5f) as float,
			(Math.random * 0.5f + 0.5f) as float)
	}
	
	/** 
	 * @param shape a shape that has to be convex
	 * @param mass the type of the mass (MassType.NORMAL or MassType.INFINITE)
	 * @param color the color of the object
	 */
	new(shape : Convex, mass : MassType, color : Color) {
		this.addFixture(shape)
		this.setMass(mass)
		this.color = color
	}
	
	def getPosition : Vector2 {
		return this.worldCenter
	}
	
	def getOrientation : double {
		return this.transform.rotation
	}
}
