/** 
 * MIT License
 * 
 * Copyright (c) 2017 Fouss
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package fr.utbm.info.ia51.crowdproject.environment

import java.util.UUID
import org.dyn4j.geometry.Convex
import org.dyn4j.geometry.Vector2
import fr.utbm.info.ia51.crowdproject.motion.MotionBehavior
import javax.sound.sampled.BooleanControl.Type
import fr.utbm.info.ia51.crowdproject.motion.CryType

abstract class AgentBody extends MobileBody implements Comparable<AgentBody> {
	
	val agentId : UUID

	val motionBehavior : MotionBehavior
	val cry : CryType
	
	new (shape : Convex,
		frustrum : Convex,
		cryRange : Convex,
		agentId : UUID,
		motionBehavior : MotionBehavior
	) {
		super(shape)
		
		var frustrumFixture = this.addFixture(frustrum)
		frustrumFixture.sensor = true
		
		var cryFixture = this.addFixture(cryRange)
		cryFixture.sensor = true
		
		this.agentId = agentId
		this.motionBehavior = motionBehavior
		this.cry = CryType.NONE
	}

	new (shape : Convex,
		frustrum : Convex,
		cryRange : Convex,
		position : Vector2,
		agentId : UUID,
		motionBehavior : MotionBehavior
	) {
		super(shape)
		
		var frustrumFixture = this.addFixture(frustrum)
		frustrumFixture.sensor = true

		var cryFixture = this.addFixture(cryRange)
		cryFixture.sensor = true
		
		this.translate(position)
		this.agentId = agentId
		this.motionBehavior = motionBehavior
		this.cry = CryType.NONE
	}
	
	def getAgentId : UUID {
		return this.agentId
	}
	
	def compareTo(o : AgentBody) : int {
		if (o === this) {
			return 0
		} else if (o === null) {
			return Integer::MAX_VALUE
		}
		return this.agentId.compareTo(o.agentId)
	}
	
	def getMotionBehavior : MotionBehavior {
		return this.motionBehavior
	}
	
	def getCry : CryType {
		return this.cry
	}
	
	/**
	 * Returns the right max linear value, according to the motion behavior
	 */
	def getMaxLinear : float {
		switch (this.motionBehavior) {
			case KINEMATIC:
				getMaxLinearVelocity
			case STEERING:
				getMaxLinearAcceleration
			default:
				throw new EnumConstantNotPresentException(MotionBehavior, "Motion behavior not yet supported")
		}
	}

	/**
	 * Returns the right max angular value, according to the motion behavior
	 */
	def getMaxAngular : float {
		switch (this.motionBehavior) {
			case KINEMATIC:
				getMaxAngularVelocity
			case STEERING:
				getMaxAngularAcceleration
			default:
				throw new EnumConstantNotPresentException(MotionBehavior, "Motion behavior not yet supported")
		}
	}
	
	
	abstract def getMaxLinearVelocity : float

	abstract def getMaxLinearAcceleration: float

	abstract def getMaxAngularVelocity : float

	abstract def getMaxAngularAcceleration: float
}
