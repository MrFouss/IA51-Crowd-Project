/** 
 * MIT License
 * 
 * Copyright (c) 2017 Fouss
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package fr.utbm.info.ia51.crowdproject.environment

import org.dyn4j.geometry.Vector2
import org.dyn4j.dynamics.Body
import org.dyn4j.geometry.Geometry

/** 
 * Abstract definition of an object emitting a sound
 */
abstract class SoundSource extends Body {
	
	val SOUND_SPEED = 3.0f

	val position : Vector2
	val range : float 
	val lifespan : double
	var timeElapsed = 0.0

	new (position : Vector2, range : float) {
		this.position = position
		this.lifespan = Double.POSITIVE_INFINITY
		this.range = range
		val newFixture = this.addFixture(Geometry.createCircle(range))
		newFixture.sensor = true
	}
	
	new (position : Vector2, range : float, lifespan : double) {
		this.position = position
		this.lifespan = lifespan
		this.range = range
	}
	
	def getMinRange : float {
		if (timeElapsed > lifespan)
			return SOUND_SPEED * (timeElapsed - lifespan) as float 
		else
			return 0.0f
	}
	
	def getMaxRange : float {
		if (timeElapsed < (range / SOUND_SPEED))
			return SOUND_SPEED * (timeElapsed as float)
		else
			return maxRange
	}
	
	/**
	 * Checks if the sound should be removed or not
	 * 
	 * @return <code>true</code> if the sound object has to be removed, <code>false</code> otherwise
	 */
	def isActive : boolean {
		return (timeElapsed - lifespan) < (range / SOUND_SPEED)
	}
}
