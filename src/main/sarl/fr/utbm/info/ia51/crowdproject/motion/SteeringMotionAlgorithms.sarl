/** 
 * MIT License
 * 
 * Copyright (c) 2017 Fouss
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package fr.utbm.info.ia51.crowdproject.motion

import java.util.UUID
import org.dyn4j.geometry.Vector2

/** 
 * Steering implementation of the wandering motion behavior
 */
class SteeringWanderAlgorithm implements WanderAlgorithm {

	val WANDER_CIRCLE_DISTANCE = 2.0f
	val WANDER_CIRCLE_RADIUS = 1.0f

	override run(emitter : UUID,
		orientation : double,
		maxLinear : float,
		maxAngular : float
	) : ActionQuery {
		
		// Calculate the circle center
		var center = Vector2.create(WANDER_CIRCLE_DISTANCE, orientation)
		
		// Calculate the displacement and its angle
		var displacement = Vector2.create(WANDER_CIRCLE_RADIUS, orientation)
		var angle = ((Math.random - Math.random) * Math.PI) as float
		displacement.rotate(angle)
		
		// Calculate the wandering force and change the speed
		var linearVector = center.add(displacement)
		linearVector.magnitude = maxLinear / 2.0f

		return new ActionQuery(emitter, MotionBehavior::STEERING, linearVector, angle)
	}
}

/** 
 * Steering implementation of the seeking motion behavior
 */
class SteeringSeekAlgorithm implements SeekAlgorithm {

	def run(
		emitter : UUID,
		orientation : double,
		targetRelativePosition : Vector2,
		maxLinear : float,
		maxAngular : float
	) : ActionQuery {
		
		
	}
}

/** 
 * Steering implementation of the fleeing motion behavior
 */
class SteeringFleeAlgorithm implements FleeAlgorithm {

	def run(
		emitter : UUID,
		orientation : double,
		targetRelativePosition : Vector2,
		maxLinear : float,
		maxAngular : float
	) : ActionQuery {
	}
}
