/** 
 * MIT License
 * 
 * Copyright (c) 2017 Fouss
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package fr.utbm.info.ia51.crowdproject.util.math

/** 
 * Abstract implementation of a 2D shape
 */
abstract class Shape2f<T extends Shape2f<T>> implements Cloneable {
	
	override clone : T {
		super.clone as T
	}
	
	/** 
	 * Replies if an intersection exists between this shape and the given shape
	 * 
	 * @param s the shape to test
	 * @return <code>true</code> if an intersection exists
	 */
	abstract def intersects(s : Shape2f<?>) : boolean
	
	/** 
	 * Replies if the shape r is contained in this shape
	 * 
	 * @param s the shape to test
	 * @return <code>true</code> if s is contained in this shape
	 */
	abstract def contains(s : Shape2f<?>) : boolean

	/** 
	 * Replies a translated copy of this shape
	 * 
	 * @param vector the translation vector
	 * @return the translated copy
	 */
	abstract def translate(vector : Vector2f) : T
	
	/** 
	 * Replies the bounding box of this shape
	 * 
	 * @return the bounding box of this shape
	 */
	abstract def getBoundingBox : Rectangle2f
}
