/** 
 * MIT License
 * 
 * Copyright (c) 2017 Fouss
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package fr.utbm.info.ia51.crowdproject.^agent

import org.dyn4j.geometry.Vector2
import java.util.List
import java.util.UUID
import fr.utbm.info.ia51.crowdproject.environment.EnvironmentBody

/**
 * A perception for an agent
 */
event Perception {

	val objects : List<EnvironmentBody>
	val position : Vector2
	val agentId : UUID
	val time : long

	new (agentId : UUID, objects : List<EnvironmentBody>, position : Vector2, time : long) {
		this.agentId = agentId
		this.objects = objects
		this.position = position
		this.time = time
	}
}

/** 
 * An agent's action on the environment
 */
event Action {

	val direction : Vector2
	val time : long

	new (direction : Vector2, time : long) {
		this.direction = direction
		this.time = time
	}
}

/** 
 * Event called at the beginning of a step
 */
event RunBeginningOfStep

/**
 * Event called at the end of a step
 */
event RunEndOfStep
