/** 
 * MIT License
 * 
 * Copyright (c) 2017 Fouss
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package fr.utbm.info.ia51.crowdproject.^agent

import fr.utbm.info.ia51.crowdproject.environment.EnvironmentBody
import fr.utbm.info.ia51.crowdproject.motion.ActionQuery
import java.util.List
import java.util.UUID
import fr.utbm.info.ia51.crowdproject.environment.AgentBody

/**
 * A perception for an agent
 */
event Perception {

	val agentId : UUID
	val agentBody : AgentBody
	val time : long
	val objects : List<EnvironmentBody>

	new (agentId : UUID, agentBody : AgentBody, time : long, objects : List<EnvironmentBody>) {
		this.agentId = agentId
		this.agentBody = agentBody
		this.time = time
		this.objects = objects
	}
}

/** 
 * An agent's action on the environment
 */
event Action {

	val agentId : UUID
	val time : long
	val motion : ActionQuery

	new (agentId : UUID, time : long, motion : ActionQuery) {
		this.agentId = agentId
		this.time = time
		this.motion = motion
	}
}

/** 
 * Event called at the beginning of a step
 */
event RunBeginningOfStep

/**
 * Event called at the end of a step
 */
event RunEndOfStep {
	
	var actionsToApply : List<ActionQuery>
	
	new (actionsToApply : List<ActionQuery>) {
		this.actionsToApply = actionsToApply
	}
}

/**
 * Event called at the end of the simulation
 */
event EndOfSimulation

/** 
 * Event called to initialize the placement of all objects on the scene, including the static objects
 */
event FrontEndEnvironmentInitialization {

	var objects : List<EnvironmentBody>

	new(objects : List<EnvironmentBody>) {
		this.objects = objects
	}
}

/**
 * Event called each time the view has to be updated
 */
event FrontEndEnvironmentChange {
	
	var objects : List<EnvironmentBody>

	new(objects : List<EnvironmentBody>) {
		this.objects = objects
	}
}

/** 
 * Event called each time the view has to remove already drawn shapes
 */
event FrontEndEnvironmentClean {

	var objects : List<EnvironmentBody>

	new(objects : List<EnvironmentBody>) {
		this.objects = objects
	}
}

/**
 * Event called when user wants a sound beacon at given coordinates
 */
event UserInteractionViewSource {
	var x : float
	var y : float

	new(x : float, y : float) {
		this.x = x
		this.y = y
	}
}
/**
 * Event called when user wants a view beacon at given coordinates
 */
event UserInteractionSoundSource {
	var x : float
	var y : float

	new(x : float, y : float) {
		this.x = x
		this.y = y
	}
}
