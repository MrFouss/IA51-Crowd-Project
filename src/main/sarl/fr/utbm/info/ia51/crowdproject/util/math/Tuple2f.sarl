/** 
 * MIT License
 * 
 * Copyright (c) 2017 Fouss
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package fr.utbm.info.ia51.crowdproject.util.math

/** 
 * 2D tuple with 2 float numbers
 * 
 * @param <T> the implementation type of the tuple
 */
abstract class Tuple2f<T extends Tuple2f<T>> implements Cloneable {
		
	/**
	 * x coordinate
	 */
	protected var x : float
	
	/**
	 * y coordinate
	 */
	protected var y : float

	new {
		this.x = this.y = 0
	}
	/** 
	 * Creates a new tuple from the x and y coordinates
	 * 
	 * @param x the x coordinate
	 * @param y the y coordinate
	 */
	new (x : float, y : float) {
		this.x = x
		this.y = y
	}
	
	/** 
	 * Creates a new tuple by copy
	 * 
	 * @param tuple the tuple to copy
	 */
	new (tuple : Tuple2f<?>) {
		this.x = tuple.x
		this.y = tuple.y
	}
	
	override clone : T {
		super.clone as T
	}
	
	override equals(t : Object) : boolean {
		if (t instanceof Tuple2f<?>) {
			return x === t.x && y == t.y
		}
		return false
	}
}
