/** 
 * MIT License
 * 
 * Copyright (c) 2017 Fouss
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package fr.utbm.info.ia51.crowdproject.^agent

import fr.utbm.info.ia51.crowdproject.environment.EnvironmentBody
import fr.utbm.info.ia51.crowdproject.environment.ShapeType
import fr.utbm.info.ia51.crowdproject.environment.StaticBody
import fr.utbm.info.ia51.crowdproject.environment.TargetBody
import fr.utbm.info.ia51.crowdproject.motion.ActionQuery
import fr.utbm.info.ia51.crowdproject.motion.CryType
import fr.utbm.info.ia51.crowdproject.motion.FleeAlgorithm
import fr.utbm.info.ia51.crowdproject.motion.KinematicFleeAlgorithm
import fr.utbm.info.ia51.crowdproject.motion.KinematicSeekAlgorithm
import fr.utbm.info.ia51.crowdproject.motion.KinematicWanderAlgorithm
import fr.utbm.info.ia51.crowdproject.motion.MotionBehavior
import fr.utbm.info.ia51.crowdproject.motion.SeekAlgorithm
import fr.utbm.info.ia51.crowdproject.motion.SteeringFleeAlgorithm
import fr.utbm.info.ia51.crowdproject.motion.SteeringSeekAlgorithm
import fr.utbm.info.ia51.crowdproject.motion.SteeringWanderAlgorithm
import fr.utbm.info.ia51.crowdproject.motion.WanderAlgorithm
import io.sarl.core.Destroy
import io.sarl.core.Logging
import java.util.List
import org.dyn4j.geometry.Slice
import org.dyn4j.geometry.Vector2

/**
 * The hamster agent
 */
agent Hamster extends Animat {
	var wanderBehavior : WanderAlgorithm
	var seekBehavior : SeekAlgorithm
	var fleeBehavior : FleeAlgorithm
	
	var timeSinceLastCry = 0
	var lastCry = CryType.NONE

	uses Logging, EnvironmentMotion
	
	override initializationMethod(params : List<Object>) : void {
		info("New hamster spawned.")
		setSkill(new DefaultEnvironmentMotion, typeof(EnvironmentMotion))
		
		super.initializationMethod(params)
		
		if (this.motionBehavior == MotionBehavior::KINEMATIC) {
			this.wanderBehavior = new KinematicWanderAlgorithm
			this.seekBehavior = new KinematicSeekAlgorithm
			this.fleeBehavior = new KinematicFleeAlgorithm
		} else if (this.motionBehavior == MotionBehavior::STEERING) {
			this.wanderBehavior = new SteeringWanderAlgorithm
			this.seekBehavior = new SteeringSeekAlgorithm
			this.fleeBehavior = new SteeringFleeAlgorithm
		}
	}
	
	on Destroy {
		info("A hamster has been killed")
	}
	
	on Perception [it.agentId == this.agentId] {
		synchronized(this) {
			var computedMotion : ActionQuery

			if (timeSinceLastCry > 100 || occurrence.agentBody.cry == CryType.NONE)
				timeSinceLastCry = 0
			else
				timeSinceLastCry++
			
			// If the target has been perceived
			var target = getPerceivedTarget(occurrence.objects)
			if (target !== null) {
				computedMotion = this.seekBehavior.run(
					occurrence.agentId,
					occurrence.agentBody.orientation,
					occurrence.agentBody.position.to(target.position),
					occurrence.agentBody.maxLinear,
					occurrence.agentBody.maxAngular
				)
				
				computedMotion.cry = CryType.POSITIVE
				lastCry = CryType.POSITIVE
				
			} else {
				var closeObstacle = getPerceivedCloseObstacle(occurrence.objects)
				if (closeObstacle !== null &&
						(occurrence.agentBody.getFixture(1).shape as Slice).sliceRadius > occurrence.agentBody.getFixture(0).shape.radius) {
					computedMotion = this.fleeBehavior.run(
						occurrence.agentId,
						occurrence.agentBody.orientation,
						occurrence.agentBody.position.to(closeObstacle.position),
						occurrence.agentBody.maxLinear,
						occurrence.agentBody.maxAngular
					)

					computedMotion.cry = CryType.WARNING
					lastCry = CryType.WARNING
					
				} else {
					var forceSumVector = getSumOfForces(occurrence.agentBody.position, occurrence.objects)
					if (forceSumVector.isZero)
						computedMotion = this.wanderBehavior.run(
							occurrence.agentId,
							occurrence.agentBody.orientation,
							occurrence.agentBody.maxLinear,
							occurrence.agentBody.maxAngular
						)
					else
						computedMotion = this.seekBehavior.run(
							occurrence.agentId,
							occurrence.agentBody.orientation,
							forceSumVector,
							occurrence.agentBody.maxLinear,
							occurrence.agentBody.maxAngular
						)

					if (timeSinceLastCry == 0) {
						computedMotion.cry = CryType.NONE
						lastCry = CryType.NONE
					} else {
						computedMotion.cry = occurrence.agentBody.cry
					}
				}
			}
			
			move(occurrence.agentId, occurrence.source, occurrence.time, computedMotion)
		}
	}
	
	private def getPerceivedTarget(objects : List<EnvironmentBody>) : TargetBody {
		for (object : objects) {
			if (object instanceof TargetBody)
				return object
		}
		return null
	}

	private def getPerceivedCloseObstacle(objects : List<EnvironmentBody>) : StaticBody {
		for (object : objects) {
			for (fixture : object.fixtures) {
				if (fixture.userData == ShapeType.BEACON_BODY)
					return object as StaticBody
			}
		}
		return null
	}

	private def getSumOfForces(currentPosition : Vector2, objects : List<EnvironmentBody>) : Vector2 {
		var forceSumVector = new Vector2(0.0f, 0.0f)
		for (object : objects) {
			for (fixture : object.fixtures) {
				switch (fixture.userData as ShapeType) {
					case HAMSTER_BODY: {
						if((object.getFixture(1).shape as Slice).sliceRadius <= object.getFixture(0).shape.radius) {
							var directionVector = currentPosition.to(object.position)
							directionVector.normalize
							forceSumVector.add(directionVector.multiply(0.5f))
						}
					}
					case TARGET_SOUND: {
						var directionVector = currentPosition.to(object.position)
						directionVector.normalize
						forceSumVector.add(directionVector.multiply(2.0f))
					}
					case POSITIVE_CRY: {
						var directionVector = currentPosition.to(object.position)
						directionVector.normalize
						forceSumVector.add(directionVector)
					}
					case WARNING_CRY: {
						var directionVector = object.position.to(currentPosition)
						directionVector.normalize
						forceSumVector.add(directionVector.multiply(2.0f))
					}
					default: {}
				}
			}
		}
		forceSumVector.normalize
		return forceSumVector.multiply(100.0f)
	}
}
