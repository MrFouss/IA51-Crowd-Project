/** 
 * MIT License
 * 
 * Copyright (c) 2017 Fouss
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package fr.utbm.info.ia51.crowdproject.^agent

import fr.utbm.info.ia51.crowdproject.motion.KinematicWanderAlgorithm
import fr.utbm.info.ia51.crowdproject.motion.MotionBehavior
import fr.utbm.info.ia51.crowdproject.motion.MotionQuery
import fr.utbm.info.ia51.crowdproject.motion.SteeringWanderAlgorithm
import fr.utbm.info.ia51.crowdproject.motion.WanderAlgorithm
import io.sarl.core.Destroy
import io.sarl.core.Logging
import java.util.List

/**
 * The hamster agent
 */
agent Hamster extends Animat {

	var wanderBehavior : WanderAlgorithm

	uses Logging, EnvironmentMotion
	
	override initializationMethod(params : List<Object>) : void {
		info("New hamster spawned.")
		setSkill(new DefaultEnvironmentMotion, typeof(EnvironmentMotion))
		
		super.initializationMethod(params)
		
		if (this.motionBehavior == MotionBehavior::KINEMATIC) {
			this.wanderBehavior = new KinematicWanderAlgorithm
		} else if (this.motionBehavior == MotionBehavior::STEERING) {
			this.wanderBehavior = new SteeringWanderAlgorithm
		}
	}

	on Destroy {
		info("A hamster has been killed")
	}
	
	on Perception [it.agentId == this.agentId] {
		synchronized(this) {
			var computedMotion : MotionQuery
			
			// If the target has been perceived
//			if (target !== null) {
//				// TODO
//			} else {
				computedMotion = this.wanderBehavior.run(
					occurrence.agentId, 
					occurrence.agentBody.position,
					occurrence.agentBody.orientation,
					occurrence.agentBody.maxLinear,
					occurrence.agentBody.maxAngular
				)
//			}
			
			move(occurrence.agentId, occurrence.source, occurrence.time, computedMotion)
		}
	}
}
