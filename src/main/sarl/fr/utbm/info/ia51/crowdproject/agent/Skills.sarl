/** 
 * MIT License
 * 
 * Copyright (c) 2017 Fouss
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package fr.utbm.info.ia51.crowdproject.^agent

import java.util.List
import java.util.Map
import fr.utbm.info.ia51.crowdproject.environment.AgentBody
import java.util.UUID
import org.dyn4j.geometry.Vector2
import java.util.TreeMap
import org.dyn4j.dynamics.World
import fr.utbm.info.ia51.crowdproject.environment.MobileBody
import fr.utbm.info.ia51.crowdproject.environment.EnvironmentBody
import java.util.LinkedList
import fr.utbm.info.ia51.crowdproject.Launcher
import fr.utbm.info.ia51.crowdproject.environment.MotionBehavior

/** 
 * Default implementation of the EnvironmentManager capacity
 */
skill DefaultEnvironmentManager implements EnvironmentManager {

	var world : World

	new () {
		this.world = new World()
	}
	
	/** 
	 * Apply the list of actions
	 * 
	 * @param actions the list of actions to apply
	 */
	def applyActions(actions : List<MotionQuery>) {
		for (action : actions) {
			// TODO apply all actions
		}
	}
	
	/** 
	 * Checks if the target has been reached for all agents
	 * 
	 * @param agentBodies the list of all agent bodies
	 * @param targetPosition current position of the target
	 * @return <code>true</code> if all agents reached the target, <code>false</code> otherwise 
	 */
	def isTargetReached(agentBodies : List<AgentBody>, targetPosition : Vector2) : boolean {
		for (body : agentBodies) {
			if (body.position.to(targetPosition).magnitude > Launcher::TARGET_OFFSET) {
				return false
			}
		}
		return true
	}
	
	/** 
	 * Replies the overall perceptions of each agent
	 * 
	 * @param agentBodies the list of all agent bodies
	 * @return the list of perceptions for each agent's body
	 */
	def getPerceptions(agentBodies : List<AgentBody>) : Map<AgentBody, List<EnvironmentBody>> {
		var perceptions = new TreeMap<AgentBody, List<EnvironmentBody>>
		for (agentBody : agentBodies) {
			val perceivedObjects = new LinkedList<EnvironmentBody>
			perceivedObjects += getVisualPerceptions(agentBody) + getAuditoryPerceptions(agentBody)
			perceptions.put(agentBody, perceivedObjects)
		}
		return perceptions
	}
	
	/** 
	 * Replies the visual perceptions of the agent
	 * 
	 * @param agentBody the body that perceives its environment
	 * @return the list of visual perceptions for the agent's body
	 */
	def getVisualPerceptions(agentBody : AgentBody) : List<EnvironmentBody> {
		val perceivedObjects = new LinkedList<EnvironmentBody>

		// TODO compute visual perceptions for the body
		
		return perceivedObjects
	}
	
	/** 
	 * Replies the auditory perceptions of the agent
	 * 
	 * @param agentBody the body that perceives its environment
	 * @return the list of auditory perceptions for the agent's body
	 */
	def getAuditoryPerceptions(agentBody : AgentBody) : List<EnvironmentBody> {
		val perceivedObjects = new LinkedList<EnvironmentBody>

		// TODO compute auditory perceptions for the body
		
		return perceivedObjects
	}
}
/** 
 * Default implementation of the EnvironmentFrontEnd capacity
 */
skill DefaultEnvironmentFrontEnd implements EnvironmentFrontEnd {
	
	/** 
	 * Sends a perception signal to an agent
	 * 
	 * @param agentId the identifier of the agent
	 * @param objects the list of objects perceived by the agent
	 * @param position the current position of the agent's body
	 */
	def sendPerception(agentId : UUID,
			objects : List<EnvironmentBody>,
			position : Vector2) {
			
		// TODO send perceptions to each agent
	}
}

/** 
 * Default implementation of the EnvironmentMotion capacity
 */
skill DefaultEnvironmentMotion implements EnvironmentMotion {
	
	/** 
	 * Moves an object in a direction
	 * 
	 * @param object the object to move
	 * @param direction the <code>Vector2</code> to follow, with a defined magnitude
	 */
	def move(object : MobileBody, direction : Vector2) {
		// TODO add motion algorithm, move the object according to the direction vector
		if (Launcher::MOTION_BEHAVIOR === MotionBehavior::KINEMATIC) {
			// TODO
		} else if (Launcher::MOTION_BEHAVIOR === MotionBehavior::STEERING) {
			// TODO
		}
	}
}
