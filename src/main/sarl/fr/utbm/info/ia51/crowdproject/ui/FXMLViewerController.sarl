/** 
 * MIT License
 * 
 * Copyright (c) 2017 Krophil'
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package fr.utbm.info.ia51.crowdproject.ui

import fr.utbm.info.ia51.crowdproject.^agent.FrontEndEnvironmentChange
import fr.utbm.info.ia51.crowdproject.^agent.FrontEndEnvironmentInitialization
import fr.utbm.info.ia51.crowdproject.environment.EnvironmentBody
import io.sarl.lang.core.Address
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.util.OpenEventSpace
import java.util.TreeMap
import java.util.UUID
import javafx.animation.AnimationTimer
import javafx.scene.layout.AnchorPane
import javafx.scene.shape.Circle
import javafx.scene.shape.Rectangle
import javafx.scene.shape.Shape
import fr.utbm.info.ia51.crowdproject.^agent.EndOfSimulation

/** 
 * 
 */
class FXMLViewerController implements EventListener {
	
	val id = UUID.randomUUID
	val shapes = new TreeMap<UUID, Shape>
	var root : AnchorPane
	val animationTimer : AnimationTimer

	var openSpace : OpenEventSpace

	new(root:AnchorPane) {
		this.root = root
		this.animationTimer = new AnimationTimer(){
			
			override handle(now : long) {
				root.children.all = shapes.values
			}
		}
	}

	def setOpenSpace(s : OpenEventSpace) {
		this.openSpace = s
	}

	def fireGameOver {
		var e = new EndOfSimulation
		e.setSource(new Address(openSpace.spaceID, this.getID))
		this.openSpace.emit(e)
	}

	@Override
	override getID : UUID {
		return this.id
	}
	
	@Override
	override receiveEvent(^event : Event) {
		synchronized(this) {

			if (^event instanceof FrontEndEnvironmentInitialization) {
				^event.objects.forEach [ object |
					val shape = createShape(object)
					shapes.put(object.id, shape)
				]
				this.animationTimer.start
	
			} else if (^event instanceof FrontEndEnvironmentChange) {
				^event.objects.forEach [ object |
					val shape = createShape(object)
					shapes.put(object.id, shape)
				]
			}
		}
	}
	
	/**
	 * Used to create the JavaFx shapes from dyn4j shapes
	 * 
	 * @param object an environmentBody that needs to have a dyn4j shape
	 * @return the newly created JavaFX shape
	 */
	private def createShape(object : EnvironmentBody) : Shape {
		var geometry = object.fixtures.get(0).shape

		if(geometry instanceof org.dyn4j.geometry.Circle) {
			var g = geometry as org.dyn4j.geometry.Circle
			new Circle(
				object.worldCenter.x,
				object.worldCenter.y,
				g.radius)
				
		} else if(geometry instanceof org.dyn4j.geometry.Rectangle) {
			var g = geometry as org.dyn4j.geometry.Rectangle

			// the object needs to be translated in order to center the figure
			new Rectangle(
				object.worldCenter.x-g.width/2,
				object.worldCenter.y-g.width/2,
				g.width,
				g.height)

		} else {
			throw new GeometryConversionException("The shape \"" + geometry.class.toString + "\" can't handled.")
		}
	}
}

class GeometryConversionException extends RuntimeException {
	new() {
		super("This shape can't be handled.")
	}

	new(message : String) {
		super(message)
	}

	new(cause : Throwable) {
		super("This shape can't be handled.", cause)
	}
	
	new(message : String, cause : Throwable) {
		super(message, cause)
	}
}
