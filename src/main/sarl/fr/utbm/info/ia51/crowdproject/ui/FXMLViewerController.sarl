/** 
 * MIT License
 * 
 * Copyright (c) 2017 Krophil'
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package fr.utbm.info.ia51.crowdproject.ui

import fr.utbm.info.ia51.crowdproject.Launcher
import fr.utbm.info.ia51.crowdproject.^agent.EndOfSimulation
import fr.utbm.info.ia51.crowdproject.^agent.Environment
import fr.utbm.info.ia51.crowdproject.^agent.FrontEndEnvironmentChange
import fr.utbm.info.ia51.crowdproject.^agent.FrontEndEnvironmentInitialization
import fr.utbm.info.ia51.crowdproject.environment.Levels
import fr.utbm.info.ia51.crowdproject.environment.MobileBody
import fr.utbm.info.ia51.crowdproject.environment.ShapeType
import fr.utbm.info.ia51.crowdproject.motion.MotionBehavior
import io.janusproject.Boot
import io.sarl.lang.core.Address
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.util.OpenEventSpace
import java.net.URL
import java.util.ArrayList
import java.util.Arrays
import java.util.HashMap
import java.util.Optional
import java.util.ResourceBundle
import java.util.UUID
import javafx.application.Platform
import javafx.fxml.FXML
import javafx.fxml.Initializable
import javafx.geometry.Insets
import javafx.scene.control.ButtonBar.ButtonData
import javafx.scene.control.ButtonType
import javafx.scene.control.CheckBox
import javafx.scene.control.ComboBox
import javafx.scene.control.Dialog
import javafx.scene.control.Label
import javafx.scene.control.TextField
import javafx.scene.image.Image
import javafx.scene.layout.BorderPane
import javafx.scene.layout.GridPane
import javafx.scene.paint.Color
import javafx.scene.paint.ImagePattern
import javafx.scene.shape.Arc
import javafx.scene.shape.ArcType
import javafx.scene.shape.Rectangle
import javafx.scene.shape.Shape
import javafx.scene.transform.Rotate
import org.dyn4j.collision.Fixture
import org.dyn4j.dynamics.Body
import org.dyn4j.dynamics.BodyFixture
import org.dyn4j.geometry.Circle
import org.dyn4j.geometry.Slice

/** 
 * 
 */
class FXMLViewerController implements Initializable, EventListener {

	public static val WIDTH = 800.0f
	public static val HEIGHT = 600.0f

	public static val NB_HAMSTERS = 10
	public static val FRUSTRUM_RADIUS = 75.0f
	public static val FRUSTRUM_ANGLE = Math.PI.floatValue / 4.0f

	public static var motionBehavior = MotionBehavior::KINEMATIC
	public static var nbHamster : Integer
	public static var levelDesign : Levels
	public static var visualDebug = true
	var cancel = false

	@FXML
	var worldDisplay : BorderPane

	var hamsterIm = new Image(getClass().getResource("hamster-ball.png").toString)

	val id = UUID.randomUUID
	val shapes = new HashMap<Fixture, Shape>

	var openSpace : OpenEventSpace

	var launcher : Launcher

	def setOpenSpace(s : OpenEventSpace) {
		this.openSpace = s
	}

	def setLauncher(l : Launcher) {
		this.launcher = l
	}

	def getCancel  {
		return cancel
	}

	def fireGameOver {
		var e = new EndOfSimulation
		e.setSource(new Address(openSpace.spaceID, this.getID))
		this.openSpace.emit(e)
	}

	@Override
	override getID : UUID {
		return this.id
	}
	
	@Override
	override receiveEvent(^event : Event) {
		synchronized(this) {
			if (^event instanceof FrontEndEnvironmentChange) {
				for (object : ^event.objects) {
					for (fixture : object.fixtures) {
						if (!shapes.containsKey(fixture)) {
							var newShape = createShape(object, fixture)
							updateColor(newShape, fixture.userData as ShapeType)
							shapes.put(fixture, newShape)
						} else {
							val shape = shapes.get(fixture)

							updateColor(shape, fixture.userData as ShapeType)
							
							// don't apply transforms if the object is not movable
							if (object instanceof MobileBody)
								shape.transform(object, fixture)
						}
					}
				}
			} else if (^event instanceof FrontEndEnvironmentInitialization) {
				for (object : ^event.objects) {
					for (fixture : object.fixtures) {
						var newShape = createShape(object, fixture)
						updateColor(newShape, fixture.userData as ShapeType)
						shapes.put(fixture, newShape)
					}
				}
			}
			worldDisplay.children.all = new ArrayList(shapes.values)
		}
	}
	
	/**
	 * Used to create the JavaFx shapes from dyn4j shapes
	 * 
	 * @param object an object that needs to have a dyn4j shape
	 * @param fixture a fixture of the object
	 * @return the newly created JavaFX shape
	 */
	private def createShape(object : Body, fixture : BodyFixture) : Shape {
		
		if (fixture.shape instanceof Circle &&
			fixture.userData as ShapeType == ShapeType.HAMSTER_BODY) {
			val g = fixture.shape as Circle
			val rectangle = new Rectangle(
				object.worldCenter.x - g.radius + WIDTH / 2,
				object.worldCenter.y - g.radius + HEIGHT / 2,
				g.radius * 2,
				g.radius * 2)
			return rectangle

		} else if (fixture.shape instanceof Circle) {
			val g = fixture.shape as Circle
			val circle = new javafx.scene.shape.Circle(
				object.worldCenter.x + WIDTH / 2,
				object.worldCenter.y + HEIGHT / 2,
				g.radius)
			return circle

		} else if (fixture.shape instanceof org.dyn4j.geometry.Rectangle) {
			val g = fixture.shape as org.dyn4j.geometry.Rectangle

			// the object needs to be translated in order to center the figure
			val rectangle = new Rectangle(
				object.worldCenter.x - g.width / 2 + WIDTH / 2,
				object.worldCenter.y - g.height / 2 + HEIGHT / 2,
				g.width,
				g.height)
			return rectangle

		} else if (fixture.shape instanceof Slice) {
			val g = fixture.shape as Slice
			val angle = Math.toDegrees(g.theta)
			
			var arc = new Arc()
			arc.centerX = object.worldCenter.x + WIDTH / 2
			arc.centerY = object.worldCenter.y + HEIGHT / 2
			arc.radiusX = g.sliceRadius
			arc.radiusY = g.sliceRadius
			arc.startAngle = object.transform.rotation - (angle / 2.0f)
			arc.length = angle
			arc.type = ArcType.ROUND
			return arc
			
		} else {
			throw new GeometryConversionException("The shape \"" + fixture.class.toString + "\" can't handled.")
		}
	}
	
	/**
	 * Updates the color of the shape
	 * 
	 * @param shape the shape to update
	 * @param shapeType the type of the shape displayed
	 */
	private def updateColor(shape : Shape, shapeType : ShapeType) {
		switch (shapeType) {
			case HAMSTER_BODY: {
				shape.fill = new ImagePattern(hamsterIm)
				shape.toFront
			}
			case WALL: {
				shape.fill = Color.BLACK
				shape.stroke = Color.GRAY
				shape.toFront
			}
			case FRUSTRUM: {
				shape.fill = Color.TRANSPARENT
				shape.stroke = if(visualDebug) Color.BLUE else Color.TRANSPARENT
				shape.toFront
			}
			case BEACON_BODY: {
				shape.fill = Color.DARKCYAN
				shape.stroke = Color.CYAN
				shape.toFront
			}
			case TARGET_SOUND: {
//				shape.fill = new RadialGradient(
//					0, 0, 0.5, 0.5, 0.5,
//					true,
//					CycleMethod.NO_CYCLE,
//					new Stop(1, Color.TRANSPARENT),
//					new Stop(0, Color.GOLD))
				shape.fill = Color.TRANSPARENT
				shape.stroke = Color.GOLD
				shape.toBack
			}
			case NO_CRY: {
				shape.fill = Color.TRANSPARENT
				shape.stroke = if(visualDebug) Color.GRAY else Color.TRANSPARENT
				shape.toBack
			}
			case POSITIVE_CRY: {
//				shape.fill = new RadialGradient(
//					0, 0, 0.5, 0.5, 0.5,
//					true,
//					CycleMethod.NO_CYCLE,
//					new Stop(1, Color.TRANSPARENT),
				// new Stop(0, Color.GREEN))
				shape.fill = Color.TRANSPARENT
				shape.stroke = Color.GREEN
				shape.toBack
			}
			case WARNING_CRY: {
//				shape.fill = new RadialGradient(
//					0, 0, 0.5, 0.5, 0.5,
//					true,
//					CycleMethod.NO_CYCLE,
//					new Stop(1, Color.TRANSPARENT),
				// new Stop(0, Color.RED))
				shape.fill = Color.TRANSPARENT
				shape.stroke = Color.RED
				shape.toBack
			}
		}
	}

	/** 
	 * Used to apply a transformation on the JavaFx shapes
	 * 
	 * @param shape the JavaFX shape to transform
	 * @param object an environmentBody that needs to have a dyn4j shape
	 * @param fixture a fixture of the object
	 */
	private def transform(shape : Shape, object : MobileBody, fixture : BodyFixture) {
		
		if (fixture.shape instanceof Circle &&
			fixture.userData as ShapeType == ShapeType.HAMSTER_BODY) {
			var g = fixture.shape as Circle
			var s = shape as Rectangle
			s.x = object.worldCenter.x - g.radius + WIDTH / 2
			s.y = object.worldCenter.y - g.radius + HEIGHT / 2
			s.rotate = Math.toDegrees(object.orientation)

		} else if (fixture.shape instanceof Circle) {
			var s = shape as javafx.scene.shape.Circle
			s.translateX = object.worldCenter.x - s.centerX + WIDTH / 2
			s.translateY = object.worldCenter.y - s.centerY + HEIGHT / 2
			s.rotate = Math.toDegrees(object.orientation)
			
		} else if (fixture.shape instanceof org.dyn4j.geometry.Rectangle) {
			var g = fixture.shape as org.dyn4j.geometry.Rectangle
			var s = shape as Rectangle
			s.x = object.worldCenter.x - g.width / 2 + WIDTH / 2
			s.y = object.worldCenter.y + HEIGHT / 2
			
		} else if (fixture.shape instanceof Slice) {
			var s = shape as Arc
			s.centerX = object.worldCenter.x + WIDTH / 2
			s.centerY = object.worldCenter.y + HEIGHT / 2
			s.transforms.clear
			s.transforms.add(new Rotate(Math.toDegrees(object.orientation), s.centerX, s.centerY))
		}
	}
	
	override initialize(arg0 : URL, arg1 : ResourceBundle) {
		var dialog : Dialog<ArrayList<String>> = new Dialog
		dialog.setTitle("Setup window");
		dialog.setHeaderText("Choose your configuration");

		var launchButtonType = new ButtonType("Launch Simulation", ButtonData.OK_DONE);
		dialog.getDialogPane().getButtonTypes().addAll(launchButtonType, ButtonType.CANCEL);
	
		var grid = new GridPane();
		grid.setHgap(10);
		grid.setVgap(10);
		grid.setPadding(new Insets(20, 150, 10, 10));


		var nbHamsterField = new TextField
		nbHamsterField.setPromptText("" + NB_HAMSTERS);

		var levelBox = new ComboBox<Levels>
		levelBox.items.addAll(Levels.values)
		levelBox.value = Levels.valueOf("BASIC")

		var debugBox = new CheckBox
		debugBox.selected = false


		grid.add(new Label("Number of hamsters:"), 0, 0)
		grid.add(nbHamsterField, 1, 0)
		grid.add(new Label("Level design"), 0, 1)
		grid.add(levelBox, 1, 1)
		grid.add(new Label("Mode Debug:"), 0, 2)
		grid.add(debugBox, 1, 2)
		

		dialog.getDialogPane().setContent(grid)
		
		// Convert the result to an arraylist when the launch button is clicked.

		dialog.setResultConverter([dialogButton | 
			if (dialogButton == launchButtonType) {
				return new ArrayList<String>(Arrays.asList(nbHamsterField.getText));
		} else {
			cancel = true
			Platform.exit
			return null
		}]);

		var result : Optional<ArrayList<String>> = dialog.showAndWait();

		result.ifPresent([ config |

			nbHamster = if(config.get(0) != "") Integer.valueOf(config.get(0)) else NB_HAMSTERS
			levelDesign = levelBox.getValue
			visualDebug = debugBox.isSelected

			Boot::startJanus(typeof(Environment), WIDTH, HEIGHT, nbHamster, FRUSTRUM_RADIUS, FRUSTRUM_ANGLE, MotionBehavior::KINEMATIC,
				this, levelDesign)

			//Boot.verboseLevel = LoggerCreator.toInt(Level.OFF)
		]);
	}
	
}

class GeometryConversionException extends RuntimeException {
	new() {
		super("This shape can't be handled.")
	}

	new(message : String) {
		super(message)
	}

	new(cause : Throwable) {
		super("This shape can't be handled.", cause)
	}
	
	new(message : String, cause : Throwable) {
		super(message, cause)
	}
}
