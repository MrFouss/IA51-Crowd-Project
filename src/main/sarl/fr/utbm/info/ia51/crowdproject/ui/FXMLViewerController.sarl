/** 
 * MIT License
 * 
 * Copyright (c) 2017 Krophil'
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package fr.utbm.info.ia51.crowdproject.ui

import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import java.util.UUID
import javafx.scene.layout.AnchorPane
import javafx.scene.shape.Shape
import fr.utbm.info.ia51.crowdproject.^agent.FrontEndEnvironmentInitialization
import fr.utbm.info.ia51.crowdproject.^agent.FrontEndEnvironmentChange
import java.util.LinkedList
import fr.utbm.info.ia51.crowdproject.environment.EnvironmentBody

/** 
 * 
 */
class FXMLViewerController implements EventListener {
	
	val id = UUID.randomUUID
	val shapes = new LinkedList<Shape>
	var root : AnchorPane

	new(root:AnchorPane) {
		this.root = root
	}

	@Override
	override getID : UUID {
		return this.id
	}
	
	@Override
	override receiveEvent(^event : Event) {
				
		if (^event instanceof FrontEndEnvironmentInitialization) {
			^event.objects.forEach [ object |
				val shape = createShape(object)
				shapes += shape
			]
		} else if (^event instanceof FrontEndEnvironmentChange) {
			^event.objects.forEach [ object |
				val shape = createShape(object)
				shapes += shape
			]
		}
		
		// FIXME really dirty updating method
		root.children.removeAll()
		root.children.addAll(shapes)
	}
	
	/**
	 * 
	 */
	private def createShape(object : EnvironmentBody) : Shape {
		// TODO return a JavaFX shape according to the Dyn4j shape
	}
}
