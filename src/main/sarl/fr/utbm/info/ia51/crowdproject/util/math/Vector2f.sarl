/** 
 * MIT License
 * 
 * Copyright (c) 2017 Fouss
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package fr.utbm.info.ia51.crowdproject.util.math

import static extension java.lang.Math.*

/** 
 * 2D vector with 2 float numbers
 */
class Vector2f extends Tuple2f<Vector2f> {
	
	/** 
	 * @param x the x coordinate
	 * @param y the y coordinate
	 */
	new(x : float = 0, y : float = 0) {
		super(x, y)
	}
	
	/** 
	 * @param v the vector to copy
	 */
	new(v : Vector2f) {
		super(v)
	}
	
	/** 
	 * Replies the norm of this vector
	 * 
	 * @return the norm of this vector
	 */
	def norm : float {
		return (x.pow(2) + y.pow(2)).sqrt as float
	}
	
	/** 
	 * Replies the dot product between this vector and v
	 * 
	 * @param v the other vector
	 * @return the dot product between this vector and v
	 */
	def dotProduct(v : Vector2f) : float {
		return this.x*v.x + this.y*v.y
	}
	
	/**
	 * Replies the angle between this vector and v
	 * 
	 * @param v the other vector
	 * @return the angle between this vector and v
	 */
	def angle(v : Vector2f) : float {
		return (this.dotProduct(v) / (this.norm * v.norm)).acos as float
	}

	def operator_plus(v1 : Vector2f, v2 : Vector2f) : Vector2f {
		return new Vector2f(v1.x + v2.x, v1.y + v2.y)
	}

	def operator_minus(v1 : Vector2f, v2 : Vector2f) : Vector2f {
		return new Vector2f(v1.x - v2.x, v1.y - v2.y)
	}
	/** 
	 * Check if a vector exists or is null
	 * 
	 * @param v vector to check
	 * @return <code>true</code> if a vector is null or with null coordinates
	 */
	def isNull : boolean {
		return (this === null) || (this.x == 0 && this.y == 0)
	}
	
	/** 
	 * Used to normalize a vector
	 * 
	 * @param v vector to normalize
	 * @return a normalized vector of the given one
	 */
	def normalize : Vector2f {
		var n = this.norm
		return new Vector2f(this.x / n, this.y / n)
	}
	/** 
	 * Used to rotate a vector 
	 * 
	 * @param v vector to rotate
	 * @param angle rotation angle
	 * @return a rotated vector according to a given angle
	 */
	def rotate(angle : float) : Vector2f {
		return new Vector2f(this.x * (angle.cos as float) - this.y * (angle.sin as float),
							this.x * (angle.sin as float) + this.y * (angle.cos as float))
	}
}
