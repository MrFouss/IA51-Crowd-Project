/** 
 * MIT License
 * 
 * Copyright (c) 2017 Fouss
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package fr.utbm.info.ia51.crowdproject.motion

import org.dyn4j.geometry.Vector2
import java.util.UUID

/** 
 * Definition of the output of a motion algorithm
 */
class ActionQuery {
	val emitter : UUID
	val motionBehavior : MotionBehavior
	var linear = new Vector2(0.0f, 0.0f)
	var angular = 0f
	var scream : boolean
	
	new (emitter : UUID, motionBehavior : MotionBehavior, scream : boolean) {
		this.emitter = emitter
		this.motionBehavior = motionBehavior
		this.scream = scream
	}

	new (emitter : UUID, motionBehavior : MotionBehavior, linear : Vector2, angular : float, scream : boolean) {
		this.emitter = emitter
		this.motionBehavior = motionBehavior
		this.linear = linear
		this.angular = angular
		this.scream = scream
	}
	
	new (toCopy : ActionQuery) {
		this.emitter = toCopy.emitter
		this.motionBehavior = toCopy.motionBehavior
		this.linear = toCopy.linear
		this.angular = toCopy.angular
		this.scream = toCopy.scream
	}
	
	def getEmitter : UUID {
		return this.emitter
	}
	
	def getMotionBehavior : MotionBehavior {
		return this.motionBehavior
	}

	def getLinear : Vector2 {
		return this.linear
	}
	
	def setLinear(x : float, y : float) {
		this.linear.x = x
		this.linear.y = y
	}
	
	def setLinear(linear : Vector2) {
		this.linear = linear
	}

	def getAngular : float {
		return this.angular
	}

	def setAngular(angular : float) {
		this.angular = angular
	}
	
	def hasScream() {
		return this.scream
	}
	
	def setScream(scream : boolean) {
		this.scream = scream
	}
}
